Serialization
static data dont serialize
transient - for objects that cant be serializable, transient fields should not be used in hashcode method 
to serialize object use ObjectOut(In)putStream





HashCode EqualsTo
if you use HashMap you should override HC ET methods, because HM firstly count and compare HC and if it is right then it uses ET method. So if you override one of these methods, you should override another one. 





Collections
Collection - interface, Arrays and Collections - classes. 
There are three impl. classes of Collection: List, Set, Queue and not impl. but too collection class is a Map. 
List
There are three List classes: ArrayList and Vector are the same one, but Vector's methods are syncronized. And another one impl. is LinkedList. It has one inner class Node which has info about current object, previous and next objects. So there is a principal difference between ArrayList and LinkedList. AL use System.arraycopy to remove element and LL just remove current object to next. LL can be used as stack or queqe.
Queue
PriorityQueue - sorted queue'
Maps
HashMap use massive of Nodes. Node has 4 fields: hash, key, value and next. Next field has data about object with the same hash of this one. 
HashTable is the same as HashMap but all methods of this class are syncronyzed.
LinkedHashMap is the linked type of Map use 'head' and 'tail' which has links to previous and next elements.
TreeMap is the sorted type of Map. It uses red-black trees sorting. It has Entry root.
Sets
Set is collection of unical elements.
HashSet - unlinked set. Should override HC and ET methods. Uses HashMap class.
LinkedHashSet - linked set. Uses LinkedHashMap. 
TreeSet - sorted set. Uses TreeMap.





Generics
G works on compilation level and after this step it just change to Object class. When use <T extends ...> 1st it is class and then interfaces. Cant create G array and static fields.
Use "List<? extends parentClass> list" to send as argument to method G. But u cant add or remove elements in this list.
Or use "<?>. It is equals to "<? extends Object>".
Or use "<? super Child>". So u can send as argument list of Parent, Object or another one class that is upper in hierarchy of classes. And u can add new elements to this list which classes are lower in hierarchy.





Inner Classes
I class have acess to private fields of main class. Inner class cant be created in static method.
StaticClasses in Main class are not inner. It has acess onli to static Main's fields.
Classes on method level. U can create this class element only after announcing this class and u cant return this class.





Anonym Classes
all methods are polymorfed





Cloning Objects
To clone objects of T class it should implement Cloneable interface. 





Reflection
Uses to "read" classes that i cant read code in. We can read fields, methods, constructors.





CMD
-d destination where we put compilated classes





Multithreading
Cycle of thread's life: NEW--->RUNNABLE<---------->RUNNING---->DEAD
                                 \------<WAITING<----/
two ways to use MT: extends Thread and implements Runnable
start() - new thread, run() - not another thread
Mythread.join() - waiting while Mythread will be dead
yield() - current thread give time leather priority threads
Synchronization
not static methods - sync on object
static methods - sync on class
static and not static have different locks that is why we should only one type of synchronization
Volatile
The volatile keyword in Java is used to indicate that a variable's value may be modified by multiple threads simultaneously. It ensures that the variable is always read from and written to the main memory, rather than from thread-specific caches, ensuring visibility across threads.

Atomic Fields
Use to get synchronized fields

Synchronized Collections
Collections.synchronizedList have all synchronized methods but if we do anything with it's data, we should write synchonized keyword in method modificate too.
SyncList uses for return data.

Deadlock
do good and not bad

Wait and Notify
we can use these methods only in sync context on the same object
wait() - waiting while thread will be done and this thread make free monitor of this object
notify() - going to thread where we use wait()

ReentrantLock
Lock lock = new ReentrantLock();
lock.lock();
lock.unlock();
we can lock in the 1st method and unlock in the 2nd method

TryLock
we can check is lock free or not with lock.trylock();

Conditions
Lock lock = new ReentrantLock();
Condition cond = lock.newCondition();
cond.signal();
cond.await();

Callable
check in package

Executors
with executor we can make pool of threads and reuse them. cached type has time limit and then thread will be dead
check in package